name: Test and generate releases

on:
  push:
    tags:
      - "*"
    branches:
      - "*"
  pull_request:
    branches:
      - "*"
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-checker:
    name: Check if other Deploys are In progress
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - name: Turnstyle
        uses: softprops/turnstyle@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  test:
    needs: build-checker
    strategy:
      matrix:
        go-version: [1.19.x]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - uses: browser-actions/setup-chrome@latest
      - name: Checkout code
        uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3.2.0
        with:
          working-directory: "./"
      - name: Test
        run: go test ./...
      - name: Verify all samples
        run: go run main.go verify configs/hidra/samples/*.yml
      - name: Run hidra on test mode
        run: go run main.go test configs/hidra/samples/*.yml  --exit-on-error

  # security-metrics:
  #   if: ${{ github.ref == 'refs/heads/main' }}
  #   name: Analyze
  #   runs-on: ubuntu-latest
  #   permissions:
  #     actions: read
  #     contents: read
  #     security-events: write

  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       language: ["go"]

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2

  #     - name: Initialize CodeQL
  #       uses: github/codeql-action/init@v1
  #       with:
  #         languages: ${{ matrix.language }}

  #     - name: Autobuild
  #       uses: github/codeql-action/autobuild@v1

  #     - name: Perform CodeQL Analysis
  #       uses: github/codeql-action/analyze@v1

  build-docker-image:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: test
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Fetch all tags
        run: git fetch --force --tags
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.19.x
      - name: Install CGO_ENABLED dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y build-essential

      - name: Set git-tag
        run: echo "GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          # either 'goreleaser' (default) or 'goreleaser-pro'
          distribution: goreleaser
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - uses: "marvinpinto/action-automatic-releases@latest"
      #   with:
      #     repo_token: "${{ secrets.GITHUB_TOKEN }}"
      #     prerelease: true
      #     draft: true
      #     files: |
      #       build/hidra-${{ env.GIT_TAG }}-darwin-amd64.tar.gz
      #       build/hidra-${{ env.GIT_TAG }}-darwin-arm64.tar.gz
      #       build/hidra-${{ env.GIT_TAG }}-linux-386.tar.gz
      #       build/hidra-${{ env.GIT_TAG }}-linux-amd64.tar.gz
      #       build/hidra-${{ env.GIT_TAG }}-linux-arm64.tar.gz
      #       build/hidra-${{ env.GIT_TAG }}-linux-arm.tar.gz
      #       build/hidra-${{ env.GIT_TAG }}-amd64.deb
      #       build/hidra-${{ env.GIT_TAG }}-arm64.deb
