name: Test and generate releases

on:
  push:
    tags:
      - '*'
    branches:
      - '*'
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    strategy:
      matrix:
        go-version: [1.18.x]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.45
          working-directory: "src/"
      - name: Test
        run: go test ./...

  security-metrics:
    if: ${{ github.ref == 'refs/heads/main' }}
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'go' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}

    - name: Autobuild
      uses: github/codeql-action/autobuild@v1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1

  build-docker-image:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: 'Generate version and dependencies'
        run: |
          make versionize
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
    
  build-release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: test
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18.x
      - name: Install dpkg-deb
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-deb
      - name: Install CGO_ENABLED dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y build-essential
      - name: 'Generate version and dependencies'
        run: |
          make versionize
          make deps

      - name: 'Build & test'
        run: |
          make build

      - name: 'compresss'
        run: |
          make compress
          
      - name: Set git-tag
        run: echo "GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

      - uses: 'marvinpinto/action-automatic-releases@latest'
        with:
          repo_token: '${{ secrets.GITHUB_TOKEN }}'
          prerelease: true
          draft: true
          files: |
            build/hidra-${{ env.GIT_TAG }}-darwin-amd64.tar.gz
            build/hidra-${{ env.GIT_TAG }}-darwin-arm64.tar.gz
            build/hidra-${{ env.GIT_TAG }}-linux-386.tar.gz
            build/hidra-${{ env.GIT_TAG }}-linux-amd64.tar.gz
            build/hidra-${{ env.GIT_TAG }}-linux-arm64.tar.gz
            build/hidra-${{ env.GIT_TAG }}-linux-arm.tar.gz
            build/hidra-${{ env.GIT_TAG }}-amd64.deb
            build/hidra-${{ env.GIT_TAG }}-arm64.deb