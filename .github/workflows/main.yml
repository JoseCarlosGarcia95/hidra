name: Test and generate releases

on:
  push:
    tags:
      - "*"
    branches:
      - "*"
  pull_request:
    branches:
      - "*"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-checker:
    name: Check if other Deploys are In progress
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - name: Turnstyle
        uses: softprops/turnstyle@v2.3.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    needs: build-checker
    strategy:
      matrix:
        go-version: [1.23.x]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install Go
        uses: actions/setup-go@v5.3.0
        with:
          go-version: ${{ matrix.go-version }}

      - uses: browser-actions/setup-chrome@v1.7.3

      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6.3.0
        with:
          working-directory: "./"
        
      # ICMP tests are skipped because GitHub runners placed in
      # Azure don't allow pinging by design.
      #
      # See: https://github.com/actions/runner-images/issues/1519
      - name: Test
        run: go test -tags skip_icmp ./...

      - name: Verify all samples
        run: go run main.go verify configs/hidra/samples/*.yml

      - name: Run hidra on test mode
        run: go run main.go test configs/hidra/samples/*.yml  --exit-on-error

  build-docker-image:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Log in to the Container registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.6.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.8.0

      - name: Build and push Docker image
        uses: docker/build-push-action@v6.13.0
        with:
          context: .
          file: Containerfile
          target: runtime
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: test
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Fetch all tags
        run: git fetch --force --tags

      - name: Install Go
        uses: actions/setup-go@v5.3.0
        with:
          go-version: 1.23.x

      - name: Install CGO_ENABLED dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y build-essential

      - name: Set git-tag
        run: echo "GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6.1.0
        with:
          # either 'goreleaser' (default) or 'goreleaser-pro'
          distribution: goreleaser
          version: latest
          args: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FURY_TOKEN: ${{ secrets.FURY_IO_TOKEN }}

    # - uses: "marvinpinto/action-automatic-releases@latest"
    #   with:
    #     repo_token: "${{ secrets.GITHUB_TOKEN }}"
    #     prerelease: true
    #     draft: true
    #     files: |
    #       build/hidra-${{ env.GIT_TAG }}-darwin-amd64.tar.gz
    #       build/hidra-${{ env.GIT_TAG }}-darwin-arm64.tar.gz
    #       build/hidra-${{ env.GIT_TAG }}-linux-386.tar.gz
    #       build/hidra-${{ env.GIT_TAG }}-linux-amd64.tar.gz
    #       build/hidra-${{ env.GIT_TAG }}-linux-arm64.tar.gz
    #       build/hidra-${{ env.GIT_TAG }}-linux-arm.tar.gz
    #       build/hidra-${{ env.GIT_TAG }}-amd64.deb
    #       build/hidra-${{ env.GIT_TAG }}-arm64.deb
